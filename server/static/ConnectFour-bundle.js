!function(e){function t(t){for(var r,a,s=t[0],u=t[1],c=t[2],f=0,p=[];f<s.length;f++)a=s[f],o[a]&&p.push(o[a][0]),o[a]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(l&&l(t);p.length;)p.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,s=1;s<n.length;s++){var u=n[s];0!==o[u]&&(r=!1)}r&&(i.splice(t--,1),e=a(a.s=n[0]))}return e}var r={},o={3:0},i=[];function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=r,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var s=window.webpackJsonp=window.webpackJsonp||[],u=s.push.bind(s);s.push=t,s=s.slice();for(var c=0;c<s.length;c++)t(s[c]);var l=u;i.push([27,0]),n()}({16:function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},17:function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e){return void 0===t[e]&&(t[e]=function(e){return document.querySelector(e)}.call(this,e)),t[e]}}(),a=null,s=0,u=[],c=n(30);function l(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(m(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(m(o.parts[a],t));r[o.id]={id:o.id,refs:1,parts:s}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function p(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function d(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function h(e){var t=document.createElement("style");return e.attrs.type="text/css",v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function m(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var u=s++;n=a||(a=h(t)),r=y.bind(null,n,u,!1),o=y.bind(null,n,u,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){d(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){d(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return l(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var a=n[i];(s=r[a.id]).refs--,o.push(s)}e&&l(f(e,t),t);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete r[s.id]}}}};var b=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function y(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=b(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},27:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),i=function(e){return e&&e.__esModule?e:{default:e}}(o);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n(28);var c=6,l=7,f=n(18)("http://localhost:5000");function p(e){return i.default.createElement("button",{onClick:e.onClick},"Join Game")}function d(e){var t={height:"30px",width:"30px",border:"1px solid black",background:e.value,margin:"0 5px 5px 0",animation:"to-"+e.value+" 1s linear",display:"inline-block"};return i.default.createElement("p",{className:"square",onClick:e.onClick,style:t})}var h=function(e){function t(){return a(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,o.Component),r(t,[{key:"renderSquare",value:function(e,t){var n=this;return i.default.createElement(d,{value:this.props.board[e][t],onClick:function(){return n.props.onClick(e,t)},key:t})}},{key:"render",value:function(){var e=this,t=this.props.board.map(function(t,n){return t=t.map(function(t,r){return e.renderSquare(n,r)}),i.default.createElement("div",{key:n,className:"row"},t)});return i.default.createElement("div",null,t)}}]),t}(),v=function(e){function t(){a(this,t);var e=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.state=t.defaultState(),e.socket=f,e}return u(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this.socket.on("init",this._initialize.bind(this)),this.socket.on("move|received",this._handleMove.bind(this)),this.socket.on("win|full",this._handleWinFull.bind(this)),this.socket.on("player1",this._makePlayer.bind(this)),this.socket.on("player2",this._makePlayer.bind(this))}},{key:"_initialize",value:function(e){var t=this.state.myTurn;t=e.myTurn,this.setState({myTurn:t})}},{key:"_handleMove",value:function(e){var t=this.state;t.history.push(e.board),t.stepNumber++,t.myTurn=e.turn,this.setState(t)}},{key:"_handleWinFull",value:function(e){e.error||(e.win&&this.setState({winner:!0}),e.full&&this.setState({full:!0}))}},{key:"_makePlayer",value:function(e){console.log("the data is:",e.turn),this.state.started||(console.log("yo the game has started?: ",this.state.started),this.setState({myTurn:e.turn,started:!0}))}},{key:"handleClick",value:function(e,t){if(!this.state.myTurn||this.state.winner||this.state.full)console.log(this.state.myTurn);else{var n=JSON.stringify({column:t});this.socket.emit("move:sent",n,function(e){})}}},{key:"render",value:function(){var e=this,t=this.state.history[this.state.stepNumber];return i.default.createElement("div",{className:"game"},i.default.createElement("div",{className:"game-board"},i.default.createElement(h,{board:t.board,onClick:function(t,n){return e.handleClick(t,n)}})),i.default.createElement("div",{className:"join-game"},i.default.createElement(p,{onClick:function(){return e.findGame()}})))}}],[{key:"defaultState",value:function(){return{history:[{board:Array(c).fill(0).map(function(e){return Array(l).fill("white")})}],stepNumber:0,myTurn:!1,winner:!1,full:!1,started:!1}}}]),t}(),m=function(e){function t(){return a(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,o.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"App"},i.default.createElement(v,null))}}]),t}();t.default=m},28:function(e,t,n){var r=n(29);"string"==typeof r&&(r=[[e.i,r,""]]);var o={transform:void 0};n(17)(r,o);r.locals&&(e.exports=r.locals)},29:function(e,t,n){(e.exports=n(16)(!0)).push([e.i,".App {\n  text-align: center;\n}\n\n.App-logo {\n  animation: App-logo-spin infinite 20s linear;\n  height: 80px;\n}\n\n.App-header {\n  background-color: #222;\n  height: 150px;\n  padding: 20px;\n  color: white;\n}\n\n.App-intro {\n  font-size: large;\n}\n\n.row {\n  margin: 0;\n}\n\n.square {\n  border-radius: 50%;\n}\n\n\n@keyframes to-red{\n  0% {background-color: white;}\n  100% {background-color: red;}\n}\n\n@keyframes to-black{\n  0% {background-color: white;}\n  100% {background-color: black;}\n}\n","",{version:3,sources:["/Users/gwomark/Documents/pythonprojects/connect4/server/assets/ConnectFour.css"],names:[],mappings:"AAAA;EACE,mBAAmB;CACpB;;AAED;EACE,6CAA6C;EAC7C,aAAa;CACd;;AAED;EACE,uBAAuB;EACvB,cAAc;EACd,cAAc;EACd,aAAa;CACd;;AAED;EACE,iBAAiB;CAClB;;AAED;EACE,UAAU;CACX;;AAED;EACE,mBAAmB;CACpB;;;AAGD;EACE,IAAI,wBAAwB,CAAC;EAC7B,MAAM,sBAAsB,CAAC;CAC9B;;AAED;EACE,IAAI,wBAAwB,CAAC;EAC7B,MAAM,wBAAwB,CAAC;CAChC",file:"ConnectFour.css",sourcesContent:[".App {\n  text-align: center;\n}\n\n.App-logo {\n  animation: App-logo-spin infinite 20s linear;\n  height: 80px;\n}\n\n.App-header {\n  background-color: #222;\n  height: 150px;\n  padding: 20px;\n  color: white;\n}\n\n.App-intro {\n  font-size: large;\n}\n\n.row {\n  margin: 0;\n}\n\n.square {\n  border-radius: 50%;\n}\n\n\n@keyframes to-red{\n  0% {background-color: white;}\n  100% {background-color: red;}\n}\n\n@keyframes to-black{\n  0% {background-color: white;}\n  100% {background-color: black;}\n}\n"],sourceRoot:""}])},30:function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},35:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,